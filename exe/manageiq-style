#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path("../lib", __dir__)

require 'bundler/setup'
require 'optimist'

opts = Optimist.options do
  opt :install, "Install or update the style configurations", :default => false
end

if opts[:install]
  require 'rubocop'
  rubocop_version = Gem::Version.new(RuboCop::Version.version)

  # Check for codeclimate channel
  cc_rubocop_channel = "rubocop-#{rubocop_version.segments[0]}-#{rubocop_version.segments[1]}"
  begin
    require 'open-uri'
    URI::HTTPS.build(
      :host => "raw.githubusercontent.com",
      :path => File.join("/codeclimate", "codeclimate-rubocop", "channel", cc_rubocop_channel, "Gemfile")
    ).open
  rescue OpenURI::HTTPError
    puts "RuboCop version #{rubocop_version.version} is not supported by CodeClimate."
    exit 1
  end

  # Update .rubocop.yml
  require 'yaml'
  data = begin
    YAML.load_file(".rubocop.yml")
  rescue Errno::ENOENT
    {}
  end

  require 'more_core_extensions/all'
  data.store_path("inherit_gem", "manageiq-style", ".rubocop_base.yml")
  data["inherit_from"] = [".rubocop_local.yml"]

  File.write(".rubocop.yml", data.to_yaml)

  # Ensure .rubocop_cc.yml exists
  File.write(".rubocop_cc.yml", {
    "inherit_from" => [
      ".rubocop_base.yml",
      ".rubocop_cc_base.yml",
      ".rubocop_local.yml"
    ]
  }.to_yaml)

  # Ensure .rubocop_local.yml exists
  File.write(".rubocop_local.yml", "\n") unless File.exists?(".rubocop_local.yml")

  # Update .codeclimate.yml
  data = begin
    YAML.load_file(".codeclimate.yml")
  rescue Errno::ENOENT
    {}
  end

  data["prepare"] = {
    "fetch" => [
      {"url" => "https://raw.githubusercontent.com/ManageIQ/manageiq-style/master/.rubocop_base.yml",    "path" => ".rubocop_base.yml"},
      {"url" => "https://raw.githubusercontent.com/ManageIQ/manageiq-style/master/.rubocop_cc_base.yml", "path" => ".rubocop_cc_base.yml"}
    ]
  }

  data.delete_path("engines", "rubocop")

  data["plugins"] ||= {}
  data["plugins"]["rubocop"] = {
    "enabled" => true,
    "config"  => ".rubocop_cc.yml",
    "channel" => cc_rubocop_channel,
  }

  File.write(".codeclimate.yml", data.to_yaml)

  # Copy configs to generator
  plugin_directory = "lib/generators/manageiq/plugin/templates"
  if File.directory?(plugin_directory)
    require 'fileutils'
    [".codeclimate.yml", ".rubocop.yml", ".rubocop_cc.yml"].each { |source| FileUtils.cp(source, File.join(plugin_directory, source)) }
    rubocop_local = File.join(plugin_directory, ".rubocop_local.yml")
    File.write(rubocop_local, "\n") unless File.exists?(rubocop_local)
  end
end
